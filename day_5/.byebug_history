exit
x1.step(x2, dx).each { |x| [x, y1] }.to
exit
c
@map
y1.step(y2, dy).map { |y| [x1, y] }.each{|coord| @map[coord] += 1 }
c
@map
y1.step(y2, dy).map { |y| [x1, y] }.each{|coord| @map[coord] += 1 }
coord_2
coord_1
y1.step(y2, dy).map { |y| [x1, y] }
y2
y1.step(y2, dy).to_a
y1.step(y2, dy)
y1
c
@map
@map.values.select{|x| x >= 2 }.count
@map.values.select{|x| x >= 2 }
@map.values
exit
c
y1.step(y2, dy).map { |y| [x1, y] }
x1.step(x2, dx).zip(y1.step(y2, dy))
x1.step(x2, dx).each { |x| [x, y1] }.to_a
x1.step(x2, dx).each { |x| [x, y1] }.step
x1.step(x2, dx).each { |x| [x, y1] }
x1.step(x2, dx).to_a
x1.step(x2, dx)
coord_2
coord_1
exit
c
[x1,x2]
x1
coord_2
coord_1
coord1
y1
x1
c
@map.values
c
@map
c
@map.values
exit
coord_2
coord_1
[coord_1[0],coord_2[0]].sort
[coord_1[1],coord_2[1]].sort
coord_1[1] == coord_2[1]
c
@map[73][952]
@map[73][951]
@map[73][875]
@map[73][874]
@map[73][873]
@map[73][872]
@map[73][871]
c
[coord_1[1],coord_2[1]].sort
"#{coord_1} #{coord_2}"
c
"#{coord_1} #{coord_2}"
coord_1
coord1
coord_1, coord_2
