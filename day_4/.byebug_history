c
@values
location
@dabs
@dabs[location[0]]
c
@dabs[location[0]][location[1]] = true
c
@dabs[location[0]][location[1]] = true
c
@dabs[location[0]][location[1]] = true
c
@dabs[location[0]][location[1]] = true
c
location
@dabs
@dabs[location[0]][location[1]]
c
@dabs[location[0]][location[1]]=true
c
@dabs[location[0]][location[1]]=true
c
@dabs[location[0]][location[1]]=true
@dabs[location[0]][location[1]]
@values
@dabs
exit
c
@values
c
@values
exit
c
input[1..-1].select{|x| x.length > 0}.map{|x| x.split.map(&:to_i) }.each_slice(6)
input[1..-1].select{|x| x.length > 0}.map{|x| x.split.map(&:to_i) }.chunk(6)
input[1..-1].select{|x| x.length > 0}.map{|x| x.split.map(&:to_i) }
input[1..-1].select{|x| x.length > 0}.first.split.map(&:to_i)
input[1..-1].select{|x| x.length > 0}.first.split
input[1..-1].select{|x| x.length > 0}.first
input[1..-1].select{|x| x.length > 0}
input[1..-1].select{|x| x.length > 0}}
input[1..-1].select{|x| x.length > 0}.map{|x| x.split.map(&:to_i) }
input[1..-1].select{|x| x.length > 0}.map{|x| x.split.update_each(&:to_i) }
input[1..-1].select{|x| x.length > 0}.map{|x| x.split.update(&:to_i) }
input[1..-1].select{|x| x.length > 0}.map{|x| x.split.transform(&:to_i) }
input[1..-1].select{|x| x.length > 0}.map{|x| x.split}
input[1..-1].select{|x| x.length > 0}.map{|x| x.split
input[1..-1].select{|x| x.length > 0}
input[1..-1].select{|x| x.length > 0}.map{|x| x.split.map(&:to_i) }.first
input[1..-1].select{|x| x.length > 0}.map{|x| x.split.map(&:to_i) }
c
@values
exit
input[1..-1].select{|x| x.length > 0}.map{|x| x.split.map(&:to_i)}c
input[1..-1].select{|x| x.length > 0}.map{|x| x.split.map(&:to_i)}
input[1..-1].select{|x| x.length > 0}.map{|x| x.split.map(&:to_i)
input[1..-1].select{|x| x.length > 0}
input[1..-1].map(&:chomp).select{|x| x.length > 0}
input[1..-1].map(&:chomp).compact
input[1..-1].map(&:chomp)
input[1..-1]
input[1..-1].each_slice(6).map{|x| x[1..-1]}
input[1..-1].each_slice(6)
input[1..-1]
exit
c
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| !@dabs.flatten[index]  }
            .select{ |value, index|  @dabs.flatten[index] }c
            .each_with_index
            .map(&:to_i)
            .flatten
        @values
            .select{ |value, index|  @dabs.flatten[index] }c
            .each_with_index
            .map(&:to_i)
            .flatten
            .select{ |value, index|  @dabs.flatten[index] }        @values
            .each_with_index
            .map(&:to_i)
            .flatten
        @values
c
@dabs.flatten
@dabs
c
!@dabs.flatten[index]
c
!@dabs.flatten[index]
c
!@dabs.flatten[index]
c
!@dabs.flatten[index]
c
!@dabs.flatten[index]
@d!abs.flatten[index]
@dabs.flatten[index]
@dabs.flatten
@dabs.flattne
index
c
@dabs
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| !@dabs.flatten[index]  }.map{|x| x[0]}
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| !@dabs.flatten[index]  }.map{|x| x[0]}.length
@values.length
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| !@dabs[index]  }.map{|x| x[0]}.length
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| !@dabs[index]  }.map{|x| x[0]}
c
@dabs.
c
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| !@dabs[index]  }.map{|x| x[0]}.sum
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| !@dabs[index  }.map{|x| x[0]}.sum
1205*74
@last_ball
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| true }.map{|x| x[0]}.sum
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| true }.map{|x| x[0]}
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| true }.map(|x| x[0]}
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| true }
@values.flatten.map(&:to_i)
@values.flatten
c
@dabs.transpose.detect{ |column| column.all?(true) }
@dabs.detect{ |row| row.all?(true) }
c
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| true }.map{|x| x[0]}
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| true }.map{|x| x[1]}
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| true }.map{_1}
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| true }
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| !@dabs.flatten[index]}
@dabs.flatten
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| !@dabs.flatten[index]}
c
@dabs
@values.flatten
@values.flatten.each_with_index.select{ |value, index| !@dabs.flatten.index}
@values.flatten.each_with_index.select{ |value, index| !@dabs.flatten.index}.map(&:to_i).sum
c
@dabs
exit
@dabs.transpose
@dabs
@values.flatten.map(&:to_i).each_with_index.select{ |value, index| !@dabs.flatten.index}
@values.flatten.map(&:to_i)
@values.flatten
@values
exit
c
exit
@boards.first.dabs
c
@boards.first.dabs
c
@boards.first.dabs
c
@boards.first.dabs
c
@boards.first.dabs
c
@boards.first.dabs
c
@boards.first.dabs
c
@boards.first.dabs
exit
c
@boards.first.dabs
exit
c
@dabs
@dabs[0][1]=1
@dabs[0]
@dabs[0][1]
@dabs[0,1]
@dabs
c
exit
@dabs
x
x[0][1] = true
x[0][1]
x = [[nil, nil, nil, nil, nil], [nil, nil, nil, nil, nil], [nil, nil, nil, nil, nil], [nil, nil, nil, nil, nil], [nil, nil, nil, nil, nil]]
x = [[],[],[]]
@dabs[0][1]
@dabs[0]
@dabs
@dabs[0][1] = true
@dabs
@dabs[0][1]
location[1]
location[0]
@dabs[location[0]][location[1]]
c
exit
@dabs
c
@dabs
c
exit
c
@boards[4].dabs
@boards[2].dabs
@boards.second.dabs
@boards.first.dabs
c
exit
c
exit
@boards.first.dabs[1][0]
@boards.first.dabs[0][0]
@boards.first.dabs[0][1]
@boards.first.dabs[0]
@boards.first.dabs
c
@boards.first.dabs
p @boards.first.dabs
exit
p @boards.first.dabs
c
p @boards.first.dabs
exit
c
p @boards.first.dabs
@boards.first.dabs
p @boards.first.dabs
puts @boards.first.dabs
@boards.first.dabs
c
@boards.first.dabs
c
@boards.first.dabs
c
@boards.first.dabs
c
@boards.first.dabs
c
@boards.first.dabs
c
@boards.first.dabs
exit
c
exit
cexit
c
@dabs[location[0]][location[1]]
@dabs[location]
location
exit
@boards.first.dabs
c
@boards.first.dabs
c
@boards.first.dabs
c
@boards.first.dabs
c
@boards.first.dabs
c
